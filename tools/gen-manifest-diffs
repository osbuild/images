#!/usr/bin/python3
#
# gen-manifests-diff is a helper to diff the generated manifests
# against what the current "main" of the images library would do.
#
# Alternatively a revision can be given as the first argument
# and with that the diff is calculated against that. All images
# types and architectures are used by default. It is still
# very fast (typically 3s).

import os
import re
import pathlib
import subprocess
import sys
import tempfile

# TODO: omit once we have a "riscv64" mirror and sources entry
arches = ["x86_64", "aarch64", "ppc64le", "s390x"]


def find_git_remote_upstream_name():
    res = subprocess.run(
        ["git", "remote", "-v"], text=True, capture_output=True, check=True)
    for line in res.stdout.split("\n"):
        if m := re.search(r'(\w+)\s+(git@|https:\/\/)github\.com(:|\/)osbuild\/images', line):
            return m.group(1)
    # if this becomes a frequent issue add the upstream remote, see
    # https://github.com/osbuild/images/pull/1356#issuecomment-2750997780
    # for details how to do this
    raise RuntimeError(f"cannot find upstream github banch in {res.stdout}, please report as a bug")


def top_srcdir() -> pathlib.Path:
    d = pathlib.Path(__file__).parent
    while not (d / "cmd" / "gen-manifests").exists():
        d = d.parent
        if d == "/":
            raise RuntimeError("cannot find gen-manifests dir")
    return d


def run_gen_manifests(images_dir, output_dir):
    env = os.environ.copy()
    env["OSBUILD_TESTING_RNG_SEED"] = "0"
    env["IMAGE_BUILDER_EXPERIMENTAL"] = "gen-manifest-mock-bpfile-uris"
    cmd = [
        "go", "run", "./cmd/gen-manifests",
        "-packages=false",
        "-metadata=false",
        "-containers=false",
        "-arches", ",".join(arches),
        "-fake-bootc=true",
        "-output", output_dir,
    ]
    p = subprocess.run(cmd, env=env, text=True, capture_output=True, check=False, cwd=images_dir)
    if p.returncode != 0:
        print(p.stdout)
        print(p.stderr)
        raise RuntimeError(f"{cmd} failed")


def manifests_diff(tmp_path, rev):
    manifests_old = tmp_path / "ref"
    manifests_new = tmp_path / "new"

    print(f"calculating diff against '{rev}'")
    images_at_rev_path = tmp_path / f"images-{rev}"
    # note that we do not use "clone --revision" as it does not
    # support pseudo revisions like "HEAD~1"
    subprocess.check_call(["git", "clone", ".", images_at_rev_path])
    subprocess.check_call(["git", "checkout", rev], cwd=images_at_rev_path)
    run_gen_manifests(images_at_rev_path, manifests_old)
    run_gen_manifests(top_srcdir(), manifests_new)

    ret = subprocess.run([
        "diff", "-uNr", manifests_old, manifests_new,
    ], capture_output=True, text=True, check=False)
    if ret.returncode == 0:
        print(f"no diff found to '{rev}'")
    else:
        print(f"found difference between {manifests_new} and reference manifests:")
        print(ret.stdout)


def main():
    rev = "main"
    match len(sys.argv):
        case 1:
            print("no revision given as argument, running against merge base")
            # merge base is calculated against upstream
            # "github.com/osbuild/images" not against the users fork
            upstream = find_git_remote_upstream_name()
            rev = subprocess.run(
                ["git", "merge-base", f"{upstream}/main", "HEAD"],
                capture_output=True, text=True, check=True,
            ).stdout.strip()
            print(f"found upstream merge base '{rev}'")
        case 2:
            rev = sys.argv[1]
        case _:
            print("only a single revision argument can be passed")
            sys.exit(1)
    print()
    print("Note that this diff does *not* include depsolved rpms,")
    print("so upstream dependency changes will not be caught\n")
    with tempfile.TemporaryDirectory() as tmpdir:
        manifests_diff(pathlib.Path(tmpdir), rev)


if __name__ == "__main__":
    main()
