#!/bin/bash
#
# This tool is meant as a temporary measure to ensure that we
# produce identical manifests from the bootc integration of
# images. We need it because we have no manifest checksums
# for bootc based images (yet).

set -e
set -o pipefail

(cd "$(dirname "$0")"/../cmd/gen-manifests && go build -buildvcs=false)

BPDIR=$(mktemp -d)
trap 'rm -rf -- "$BPDIR"' EXIT
BP_EMPTY="$BPDIR/empty.json"
cat <<EOF > "$BP_EMPTY"
{}
EOF
BP_FULL_FS="$BPDIR/full.json"
cat <<EOF > "$BP_FULL_FS"
{
  "customizations": {
    "filesystem": [
      {
        "mountpoint": "/",
        "minsize": "10 GiB"
      },
      {
        "mountpoint": "/var/data",
        "minsize": "20 GiB"
      }
    ],
    "user": [
      {
        "name": "alice",
        "key": "ssh-rsa AAA ... user@email.com",
        "groups": [
          "wheel",
          "admins"
        ]
      }
    ],
    "group": [
      {
        "name": "fancypants"
      }
    ]
  }
}
EOF
BP_LVM="$BPDIR/lvm.json"
cat <<EOF > "$BP_LVM"
{
  "customizations": {
    "disk": {
      "partitions": [
            {
                "type": "lvm",
                "minsize": "22 GiB",
                "logical_volumes": [
		    {
			   "mountpoint": "/",
			   "fs_type": "ext4",
                           "minsize": "15 GiB"
		    }
                ]
            }
        ]
    }
  }
}
EOF


for REF in quay.io/centos-bootc/centos-bootc:stream9 \
	   quay.io/fedora/fedora-bootc:42;
do
    for ARCH in x86_64 aarch64; do
	for BP in "$BP_FULL_FS" "$BP_LVM" "$BP_EMPTY"; do
	    for BUILD_REF in "" "quay.io/fedora/fedora-bootc:41"; do
		for TYPE in anaconda-iso qcow2; do
		    echo "Testing $REF;$ARCH;$(basename "$BP")"
		    sudo podman pull -q --arch "$ARCH" "$REF"
		    if [ -n "$BUILD_REF" ]; then
			sudo podman pull -q --arch "$ARCH" "$BUILD_REF"
		    fi

		    TMPDIR=$(mktemp -d)
		    trap 'rm -rf -- "$TMPDIR"' EXIT

		    ROOTFS=""
		    if grep -q fedora <(echo "$REF"); then
			ROOTFS="ext4"
		    fi

		    # we cannot just go run
		    # github.com/osbuild/bootc-image-builder... here
		    # because bib uses a "imagedefs" directory that
		    # is loaded from real files
		    sudo podman run \
			--quiet \
			--rm -i \
			--privileged \
			--pull=newer \
			--security-opt label=type:unconfined_t \
			-v "$BP":/config.json \
			-v /var/lib/containers/storage:/var/lib/containers/storage \
			ghcr.io/osbuild/bootc-image-builder:latest \
			manifest "$REF" \
			--target-arch "$ARCH" \
			--rootfs "$ROOTFS" \
			--build-container "$BUILD_REF" \
			--type "$TYPE" > "$TMPDIR/bib.json"

		    # oh well, we need to convert our blueprint into the
		    # gen-manifests config :/
		    echo '{"blueprint":' >  "$TMPDIR"/gm-conf.json
		    cat "$BP" >> "$TMPDIR"/gm-conf.json
		    echo '}' >>  "$TMPDIR"/gm-conf.json
		    sudo ./cmd/gen-manifests/gen-manifests \
			-types "$TYPE" \
			-arches "$ARCH" \
			-distros ignore \
			-metadata=false \
			-config "$TMPDIR"/gm-conf.json \
			-bootc-refs "$REF#$BUILD_REF" \
			-output "$TMPDIR"

		    # ensure manifests are identical (but skip uuid diffs)
		    echo "Comparing images and bootc-image-builder generated manifests"
		    diff -u <(jq < "$TMPDIR"/bootc_*.json | grep -E -v '(uuid|volid)' ) <(jq <  "$TMPDIR"/bib.json | grep -E -v '(uuid|volid)')

		    echo "DONE"
		    echo
		done
	    done
	done
    done
done
