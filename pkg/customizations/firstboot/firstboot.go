package firstboot

import (
	"errors"
	"fmt"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/osbuild/blueprint/pkg/blueprint"
	"github.com/osbuild/images/pkg/shutil"
)

type FirstbootOptions struct {
	Scripts []Script
}

type Script struct {
	Filename      string
	Contents      string
	IgnoreFailure bool
	Certs         []string
}

// FirstbootCommonOptions contains common fields for all firstboot options.
type FirstbootCommonOptions struct {
	// Optional firstboot name. Must be unique within the blueprint and only
	// alphanumeric characters with dashes and underscores are allowed.
	Name string

	// Ignore errors when executing the firstboot script and continue with
	// execution of the following firstboot scripts, if any. By default,
	// firstboot scripts are executed in order and if one of them fails, the
	// execution stops immediately.
	IgnoreFailure bool
}

// CustomFirstbootOptions contains fields specific to custom firstboot
// options.
type CustomFirstbootOptions struct {
	FirstbootCommonOptions

	// Strings without shebang will be interpreted as shell scripts, otherwise
	// the script will be executed using the shebang interpreter. Required if
	// type is set to "custom".
	Contents string
}

// SatelliteFirstbootOptions contains fields specific to satellite firstboot
// options.
type SatelliteFirstbootOptions struct {
	FirstbootCommonOptions

	// Optional CA certificate to enroll into the system before executing the
	// firstboot script.
	CACerts []string

	// Registration command as generated by the Satellite server. Required, if
	// type is set to "satellite".
	Command string
}

// AAPFirstbootOptions contains fields specific to AAP firstboot options.
type AAPFirstbootOptions struct {
	FirstbootCommonOptions

	// Optional CA certificate to enroll into the system before executing the
	// firstboot script.
	CACerts []string

	// Job template URL as generated by the AAP server. Required if type is set
	// to "aap". Example URLs are
	// https://aap.example.com/api/controller/v2/job_templates/9/callback/ or
	// https://aap.example.com/api/v2/job_templates/9/callback/ depending on the
	// AAP version.
	JobTemplateURL string

	// The host config key. Required if type is set to "aap".
	HostConfigKey string
}

// FirstbootOption is a union of all supported firstboot options.
type FirstbootOption interface {
	isFirstbootOption()
}

func (CustomFirstbootOptions) isFirstbootOption()    {}
func (SatelliteFirstbootOptions) isFirstbootOption() {}
func (AAPFirstbootOptions) isFirstbootOption()       {}

var ErrFirstbootAlreadySet = errors.New("firstboot customization already set")

var tmplFirstbootAAP = `#!/usr/bin/bash
curl -i --data {{ .HostConfigKey }} {{ .URL }}
`

func renderFirstboot(tmplStr string, data any) (string, error) {
	tmpl, err := template.New("firstboot-unit").Parse(tmplStr)
	if err != nil {
		return "", fmt.Errorf("error parsing firstboot unit template: %w", err)
	}

	var result strings.Builder
	err = tmpl.Execute(&result, data)
	if err != nil {
		return "", fmt.Errorf("error rendering firstboot unit: %w", err)
	}

	return result.String(), nil
}

// FirstbootOptionsFromBP converts a blueprint FirstbootCustomization to
// FirstbootOptions. Validation is done in the blueprint package, so this function
// assumes the input is valid, however, JSON unmarshalling errors are possible.
func FirstbootOptionsFromBP(bpFirstboot blueprint.FirstbootCustomization) (*FirstbootOptions, error) {
	fo := &FirstbootOptions{}
	var satDone, aapDone bool
	var ci int

	nameFunc := func(inputName, prefix string) string {
		// keep the naming convention consistent with the existing "osbuild-first-boot"
		name := fmt.Sprintf("osbuild-first-%s", filepath.Base(inputName))
		if name == "" {
			ci++
			name = fmt.Sprintf("osbuild-first-%s-%d", prefix, ci)
		}

		return name
	}

	for _, fbsc := range bpFirstboot.Scripts {
		cust, sat, aap, err := fbsc.SelectUnion()
		if err != nil {
			return nil, err
		}

		if cust != nil {
			fo.Scripts = append(fo.Scripts, Script{
				Filename:      nameFunc(cust.Name, "custom"),
				Contents:      cust.Contents,
				IgnoreFailure: cust.IgnoreFailure,
			})
		}

		if sat != nil {
			if satDone {
				return nil, fmt.Errorf("%w: satellite", ErrFirstbootAlreadySet)
			}
			satDone = true

			fo.Scripts = append(fo.Scripts, Script{
				Filename:      nameFunc(sat.Name, "satellite"),
				Contents:      sat.Command,
				IgnoreFailure: sat.IgnoreFailure,
				Certs:         sat.CACerts,
			})
		}

		if aap != nil {
			if aapDone {
				return nil, fmt.Errorf("%w: aap", ErrFirstbootAlreadySet)
			}
			aapDone = true

			data := struct {
				URL           string
				HostConfigKey string
			}{
				URL:           shutil.Quote(aap.JobTemplateURL),
				HostConfigKey: shutil.Quote("host_config_key=" + aap.HostConfigKey),
			}
			contents, err := renderFirstboot(tmplFirstbootAAP, data)
			if err != nil {
				return nil, err
			}

			fo.Scripts = append(fo.Scripts, Script{
				Filename:      nameFunc(aap.Name, "aap"),
				Contents:      contents,
				IgnoreFailure: aap.IgnoreFailure,
				Certs:         aap.CACerts,
			})
		}
	}

	return fo, nil
}
