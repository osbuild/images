#!/usr/bin/env python3
"""
Reads the config map and verifies that: 1. All listed config files exist, and 2. The combination of distros, arches, and
image-types produces at least one valid build configuration for each config file.

The config map is read as test/config-map.json relative to the repository root.
"""
import argparse
import json
import pathlib
import sys

import imgtestlib as testlib


def read_config_map(root):
    config_map_path = root / "test/config-map.json"
    if not config_map_path.exists():
        print(f"config map not found at {config_map_path}", file=sys.stderr)
        sys.exit(1)

    print(f"Reading config map: {config_map_path}")
    with config_map_path.open(encoding="utf-8") as config_map_fp:
        return json.load(config_map_fp), config_map_path.parent


def validate_config_file_paths(config_map, config_map_dir):
    """
    Validate that all paths used as keys in the config map exist. Paths must be relative to config_map_dir (the parent
    directory of the config map).

    Returns a list of paths found in the config map that were not found in the directory.
    """
    not_found = []
    for path in config_map.keys():
        config_path = config_map_dir / path
        if not config_path.exists():
            not_found.append(config_path)

    return not_found


def validate_build_config(config_map, root):
    """
    Validate that all build configurations (distros, arches, image types) match at least one valid, known configuration.

    Returns a list of 2-tuples, each consisting of the config file path and the build configuration.
    """
    no_matches = []
    for config, build_config in config_map.items():
        distros = build_config.get("distros", ["*"])
        arches = build_config.get("arches", ["*"])
        image_types = build_config.get("image-types", ["*"])

        matches = testlib.list_images(distros=distros, arches=arches, images=image_types, cmd_root=root)
        if not matches:
            no_matches.append((config, build_config))

    return no_matches


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("path", default=".", nargs="?", help="path to repository root")
    args = parser.parse_args()

    root = pathlib.Path(args.path)

    config_map, config_map_dir = read_config_map(root)

    print("Validating config file paths")
    not_found = validate_config_file_paths(config_map, config_map_dir)
    if not_found:
        print("  failed: the following config files were not found:", file=sys.stderr)
        for idx, path in enumerate(not_found, start=1):
            print(f"{idx}: {path}", file=sys.stderr)
        sys.exit(len(not_found))
    print("OK: All config files found")

    print("Validating build configurations (distros, arches, image types)")
    no_matches = validate_build_config(config_map, root)
    if no_matches:
        print("failed: the following configs do not match any known build configurations", file=sys.stderr)
        for idx, (config, build_config) in enumerate(no_matches, start=1):
            distros = ",".join(build_config.get("distros", ["*"]))
            arches = ",".join(build_config.get("arches", ["*"]))
            image_types = ",".join(build_config.get("image-types", ["*"]))
            print(f"{idx} {config}:", file=sys.stderr)
            print(f"  distros: {distros}", file=sys.stderr)
            print(f"  arches: {arches}", file=sys.stderr)
            print(f"  image types: {image_types}", file=sys.stderr)

        sys.exit(len(no_matches))
    print("OK: All test configs have at least one valid build configuration")


if __name__ == "__main__":
    main()
