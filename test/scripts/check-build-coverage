#!/usr/bin/env python3
import argparse
import json
import os
import sys

import imgtestlib as testlib

# Don't check for these image types
SKIPS = [
    "oci",  # OCI is identical to qcow2, so the manifests are identical and it's never built
]


def check_build_coverage(cachedir):
    ci_commit = os.environ.get("CI_COMMIT_SHA")
    ci_branch = os.environ.get("CI_COMMIT_BRANCH")
    tests = set()
    built_now = set()
    built_pr = set()
    for root, _, files in os.walk(cachedir):
        for fname in files:
            _, ext = os.path.splitext(fname)
            if ext != ".json":
                continue

            fpath = os.path.join(root, fname)
            with open(fpath, encoding="utf-8") as info_file:
                build_info = json.load(info_file)
            distro = build_info["distro"]
            arch = build_info["arch"]
            image = build_info["image-type"]
            tests.add((distro, arch, image))

            commit = build_info["commit"]
            config = build_info["config"]
            pr = build_info.get("pr")
            if commit == ci_commit:
                # config was rebuilt in this run: collect and report
                built_now.add((distro, arch, image, config))
            if pr is not None and pr == ci_branch:  # make sure we don't print it when both are None
                # config was rebuilt in this PR (potentially in another run): collect and report
                built_pr.add((distro, arch, image, config, commit))

    all_combos = set()
    for config in testlib.list_images(arches=["x86_64", "aarch64"]):
        distro = config["distro"]
        arch = config["arch"]
        image = config["image-type"]
        if image in SKIPS:
            continue
        all_combos.add((distro, arch, image))

    missing = all_combos - tests
    return missing, built_now, built_pr


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("cachedir", type=str, help="path to download the build test cache")
    args = parser.parse_args()
    cachedir = args.cachedir
    testlib.dl_s3_configs(cachedir)

    missing, now, pr = check_build_coverage(cachedir)

    if now:
        print("Configurations built in this pipeline")
        for build in now:
            distro, arch, image, config = build
            print(f"✅ {distro} {arch} {image} {config}")
    else:
        print("⭕ No images were built in this pipeline")

    if now:
        print("Configurations built in this PR")
        for build in pr:
            distro, arch, image, config, commit = build
            commit_url = f"https://github.com/osbuild/images/commit/{commit}"
            print(f"✅ {distro} {arch} {image} {config} ({commit_url})")
    else:
        print("⭕ No images were built in this PR")

    if missing:
        print(f"❌ {len(missing)} distro/arch/image combinations have no builds in the cache")
        for idx, m in enumerate(missing, start=1):
            print(f" {idx:3d}: " + "/".join(m))
        sys.exit(1)


if __name__ == "__main__":
    main()
