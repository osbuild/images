#!/usr/bin/env python3
#
# Create a job for each distro+arch to run test generators and triggers.
import sys

import imgtestlib as testlib

ARCHITECTURES = ["x86_64", "aarch64"]
MANIFEST_ONLY_ARCHES = ["ppc64le", "s390x"]


BASE_CONFIG = """---
stages:
  - init
  - gen
  - build
  - finish

variables:
  # Set the parent pipeline ID as a global variable so that the child pipeline
  # jobs can use it to retrieve artifacts.
  PARENT_PIPELINE_ID: $CI_PIPELINE_ID

init:
  stage: init
  interruptible: true
  tags:
    - shell
  script:
    - schutzbot/update_github_status.sh start

finish:
  stage: finish
  dependencies: []
  tags:
    - shell
  script:
    - schutzbot/update_github_status.sh finish

fail:
  stage: finish
  tags:
    - shell
  script:
    - schutzbot/update_github_status.sh fail
    - exit 1  # make the pipeline fail so it doesn't look like success
  when: on_failure
"""

GEN_TEMPLATE = """
generate-build-config-{distro}-{arch}:
  stage: gen
  extends: .terraform
  variables:
    RUNNER: aws/rhel-9.4-ga-{arch}
    INTERNAL_NETWORK: "true"
  script:
    - sudo ./test/scripts/setup-osbuild-repo
    - sudo ./test/scripts/install-dependencies
    - ./test/scripts/generate-build-config --distro {distro} --arch {arch} build-config.yml
  artifacts:
    paths:
      - build-config.yml
  cache:
    key: testcache
    paths:
      - {cache}
"""

TRIGGER_TEMPLATE = """
image-build-trigger-{distro}-{arch}:
  stage: build
  trigger:
    include:
      - artifact: build-config.yml
        job: generate-build-config-{distro}-{arch}
    strategy: depend
  needs:
    - generate-build-config-{distro}-{arch}
"""

MANIFEST_GEN_TEMPLATE = """
generate-manifests-{distro}-{arch}:
  stage: gen
  extends: .terraform
  variables:
    RUNNER: aws/rhel-9.4-ga-x86_64
    INTERNAL_NETWORK: "true"
  script:
    - sudo ./test/scripts/setup-osbuild-repo
    - sudo ./test/scripts/install-dependencies
    - go run -tags=exclude_graphdriver_btrfs ./cmd/gen-manifests --arches {arch} --distros {distro} --workers 10 --metadata=false --output ./manifests
    - for manifest in ./manifests/*; do
        if osbuild --inspect $manifest > output; then
          echo "$manifest OK";
        else
          cat output;
        fi;
      done
"""


def sort_configs(configs):
    return sorted(configs, key=lambda img: img["distro"]+img["arch"]+img["image-type"])


def main():
    config_path = sys.argv[1]
    images = testlib.list_images(arches=ARCHITECTURES)
    combos = set()

    cache = testlib.TEST_CACHE_ROOT

    gen_stage = []
    trigger_stage = []
    for img in sort_configs(images):
        combo = (img["distro"], img["arch"])
        if combo in combos:
            continue

        combos.add(combo)
        gen_stage.append(GEN_TEMPLATE.format(distro=img["distro"], arch=img["arch"], cache=cache))
        trigger_stage.append(TRIGGER_TEMPLATE.format(distro=img["distro"], arch=img["arch"], cache=cache))

    man_only_images = testlib.list_images(arches=MANIFEST_ONLY_ARCHES)
    man_gen_stage = []
    for img in sort_configs(man_only_images):
        combo = (img["distro"], img["arch"])
        if combo in combos:
            continue

        combos.add(combo)
        man_gen_stage.append(MANIFEST_GEN_TEMPLATE.format(distro=img["distro"], arch=img["arch"]))

    with open(config_path, "w", encoding="utf-8") as config_file:
        config_file.write(BASE_CONFIG)
        config_file.write(testlib.BASE_CONFIG)
        config_file.write("\n".join(gen_stage))
        config_file.write("\n".join(trigger_stage))
        config_file.write("\n".join(man_gen_stage))


if __name__ == "__main__":
    main()
